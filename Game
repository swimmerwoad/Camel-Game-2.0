package tk.swimmerwoad.CamelGame;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;
import javax.swing.JTextArea;

import tk.swimmerwoad.CamelGame.entity.mob.BarGuy;
import tk.swimmerwoad.CamelGame.entity.mob.HouseManager;
import tk.swimmerwoad.CamelGame.entity.mob.Pet;
import tk.swimmerwoad.CamelGame.entity.mob.Player;
import tk.swimmerwoad.CamelGame.entity.mob.Skeleton;
import tk.swimmerwoad.CamelGame.entity.mob.TutorialQuestGuy;
import tk.swimmerwoad.CamelGame.graphics.Screen;
import tk.swimmerwoad.CamelGame.house.HouseGUI;
import tk.swimmerwoad.CamelGame.house.HouseKey;
import tk.swimmerwoad.CamelGame.house.furniture.Table;
import tk.swimmerwoad.CamelGame.input.Keyboard;
import tk.swimmerwoad.CamelGame.input.Mouse;
import tk.swimmerwoad.CamelGame.input.MouseMenu;
import tk.swimmerwoad.CamelGame.inventory.Ale;
import tk.swimmerwoad.CamelGame.inventory.Gold;
import tk.swimmerwoad.CamelGame.inventory.Inventory;
import tk.swimmerwoad.CamelGame.inventory.input.InventoryKey;
import tk.swimmerwoad.CamelGame.level.Level;
import tk.swimmerwoad.CamelGame.level.TileCoords;
import tk.swimmerwoad.CamelGame.quest.Quest;
import tk.swimmerwoad.CamelGame.quest.TutQuest;

public class Game extends Canvas implements Runnable {
	private static final long serialVersionUID = 1L;
	public static int width = 300;
	public static int height = width / 16 * 9;
	public static int scale = 3;
	
        public int health = 25;
	private Thread thread;
	private Thread thread2;
	private Thread thread3;
	private Thread thread4;
	private Thread thread5;
	private JFrame frame;
	private Keyboard key;
	private InventoryKey invkey;
	public static Level level;
	private Player player;
	private Skeleton skeleton;
	private TutorialQuestGuy tutQuestGuy;
	private BarGuy barGuy;
	private Inventory inv;
	public static boolean running = false;
	private Screen screen;
	public static String title = "CamelGame 2.0";
	public int xTile = 8;
	public int yTile = 8;
	public Quest TutQuest = new TutQuest("Tutorial");
	public static JTextArea box;
	private Pet pet;
	private Gold gold;
	private Ale ale;
	private HouseManager houseMan;
	private HouseGUI houseGUI;
	public static HouseKey housekey;
	private Table table;
	
	public static State state = State.Game;
	private Menu menu = new Menu();
	
	private BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt)image.getRaster().getDataBuffer()).getData();
	
	public Game(){
		Dimension size = new Dimension(width * scale, height * scale);
		setPreferredSize(size);
		screen = new Screen(width, height);
		frame = new JFrame();
		key = new Keyboard();
		invkey = new InventoryKey();
		housekey = new HouseKey();
		inv = new Inventory();
		houseGUI = new HouseGUI();
		level = Level.Start;
		TileCoords spawn = new TileCoords(xTile, yTile);
		player = new Player(spawn.x(), spawn.y(), key);
		player.init(level);
		skeleton = new Skeleton();
		tutQuestGuy = new TutorialQuestGuy();
		barGuy = new BarGuy();
		houseMan = new HouseManager();
		pet = new Pet();
		gold = new Gold();
		ale = new Ale();
		table = new Table();
		addKeyListener(key);
		addKeyListener(invkey);
		addKeyListener(housekey);
		Mouse mouse = new Mouse();
		MouseMenu mouseM = new MouseMenu();
		addMouseListener(mouse);
		addMouseMotionListener(mouse);
		addMouseListener(mouseM);
		box = new JTextArea(5, 5);
		box.setEditable(false);

	}
	
	public static enum State{
		Menu, Game, Exit, Inventory, Edit;
	};
	
	public synchronized void start() {
		running = true;
		thread = new Thread(this, "Display");
		thread2 = new Thread(new Thread2()); //Respawning
		thread3 = new Thread(new Thread3()); //XP Calculation and Leveling
		thread4 = new Thread(new Thread4()); //Skills Calculation
		thread5 = new Thread(new Thread5()); //Currently Unused
		thread.start();
		thread2.start();
		thread3.start();
		thread4.start();
		thread5.start();
	}
	public synchronized void stop() {
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	public void run() {
		Long lastTime = System.nanoTime();
		long timer = System.currentTimeMillis();
		final double ns = 1000000000.0 / 60.0;
		double delta = 0;
		int fps = 0;
		int updates = 0;
		requestFocus();
		while(running){
			if(state == State.Exit){
				stop();
			}
				long now = System.nanoTime();
				delta += (now - lastTime) / ns;
				lastTime = now;
				while(delta >= 1){
					update();
					updates++;
					delta--;
				}
				render();
				fps++;
				
				if(System.currentTimeMillis() - timer > 1000){
					timer += 1000;
					frame.setTitle(title + "   |   " + updates + " ups, " + fps + " fps");
					updates = 0;
					fps = 0;
				}
		}
		stop();
	}
	
	public void update(){
		if(!Quest.questInit && state == State.Game){
				key.update();
				player.update();
				level.update();
				Level.time();
				ale.update();
				gold.update();
		}
		else if(state == State.Inventory){
			invkey.update();
			inv.update();
		}
		else if(state == State.Edit){
			housekey.update();
			houseGUI.update();
		}
	}
	
	public static int getWindowWidth(){
		return width * scale;
	}
	
	public static int getWindowHeight(){
		return height * scale;
	}
	
	@SuppressWarnings("static-access")
	public void render(){
		BufferStrategy bs = getBufferStrategy();
		if(bs == null){
			createBufferStrategy(3);
			return;
		}
		if(table.tableCount >= 1){
			table.render(screen);
		}
		Graphics g = bs.getDrawGraphics();
		if(state == State.Inventory){
			inv.render(g);
			//Inventory.goldInt ++; - Caused a bug
			//Bug Report: Infinite amount of gold can be generated - Solved
		}
		else if(state == State.Edit){
			houseGUI.render(g);
		}
		else if(state == State.Game){
			int xScroll = player.x - screen.width / 2;
			int yScroll = player.y - screen.height / 2;
			level.render(xScroll, yScroll, screen);
			player.render(screen, g);
			skeleton.render(screen);
			tutQuestGuy.render(screen);
			barGuy.render(screen);
			houseMan.render(screen);
			TutQuest.render(screen, g, bs);
			pet.render(screen);
			
			for(int i = 0; i < pixels.length; i++){
				pixels[i] = screen.pixels[i];
			}

			g.setColor(Color.BLACK);
			g.fillRect(0, 0, getWidth(), getHeight());
			g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
			TutQuest.render(screen, g, bs);
			g.setColor(Color.RED);
			g.setFont(new Font("Comic Sans MS", 0, 20));
			g.drawString("Level: " + Player.pLevel, 50, 50);
			g.drawString("X: " + player.x / 16, 50, 80);
			g.drawString("Y: " + player.y / 16, 50, 100);
                        g.fillOval(150, 30, health, health); //Health Circles
                        g.fillOval(180, 30, health, health);
                        g.fillOval(210, 30, health, health);
		}
		else if(state == State.Menu){
			menu.render(screen, g);
		}
		screen.clear();
		g.dispose();
		bs.show();
	}
	
	public static void main(String[] args){
		Game game = new Game();
		game.frame.setResizable(false);
		game.frame.setTitle(Game.title);
		game.frame.add(box, BorderLayout.PAGE_END);
		game.frame.add(game);
		game.frame.pack();
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		game.frame.setLocationRelativeTo(null);
		game.frame.setVisible(true);
		game.start();
	}
}
